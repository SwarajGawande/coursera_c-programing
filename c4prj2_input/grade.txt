Grading at Fri Jun 26 04:08:27 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1409== Memcheck, a memory error detector
==1409== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1409== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1409== Command: ./tester h.txt d.txt
==1409== Parent PID: 1408
==1409== 
==1409== Invalid read of size 8
==1409==    at 0x401127: print_hand (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x401E25: main (test-input.c:84)
==1409==  Address 0x5205978 is 0 bytes after a block of size 56 alloc'd
==1409==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1409==    by 0x401444: add_empty_card (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x400B42: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x400D3B: read_input (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x401D0A: main (test-input.c:69)
==1409== 
==1409== Invalid read of size 8
==1409==    at 0x40112A: print_hand (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x401E25: main (test-input.c:84)
==1409==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1409== 
==1409== 
==1409== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1409==  Access not within mapped region at address 0x0
==1409==    at 0x40112A: print_hand (in /graderhome/work/c4prj2_input/tester)
==1409==    by 0x401E25: main (test-input.c:84)
==1409==  If you believe this happened as a result of a stack
==1409==  overflow in your program's main thread (unlikely but
==1409==  possible), you can try to increase the size of the
==1409==  main thread stack using the --main-stacksize= flag.
==1409==  The main thread stack size used in this run was 8388608.
==1409== 
==1409== HEAP SUMMARY:
==1409==     in use at exit: 992 bytes in 67 blocks
==1409==   total heap usage: 127 allocs, 60 frees, 16,384 bytes allocated
==1409== 
==1409== LEAK SUMMARY:
==1409==    definitely lost: 0 bytes in 0 blocks
==1409==    indirectly lost: 0 bytes in 0 blocks
==1409==      possibly lost: 0 bytes in 0 blocks
==1409==    still reachable: 992 bytes in 67 blocks
==1409==         suppressed: 0 bytes in 0 blocks
==1409== Rerun with --leak-check=full to see details of leaked memory
==1409== 
==1409== For counts of detected and suppressed errors, rerun with: -v
==1409== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1415== Memcheck, a memory error detector
==1415== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1415== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1415== Command: ./tester i1 i2
==1415== Parent PID: 1414
==1415== 
==1415== Use of uninitialised value of size 8
==1415==    at 0x40112A: print_hand (in /graderhome/work/c4prj2_input/tester)
==1415==    by 0x401E25: main (test-input.c:84)
==1415== 
==1415== Invalid read of size 8
==1415==    at 0x40112A: print_hand (in /graderhome/work/c4prj2_input/tester)
==1415==    by 0x401E25: main (test-input.c:84)
==1415==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1415== 
==1415== 
==1415== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1415==  Access not within mapped region at address 0x0
==1415==    at 0x40112A: print_hand (in /graderhome/work/c4prj2_input/tester)
==1415==    by 0x401E25: main (test-input.c:84)
==1415==  If you believe this happened as a result of a stack
==1415==  overflow in your program's main thread (unlikely but
==1415==  possible), you can try to increase the size of the
==1415==  main thread stack using the --main-stacksize= flag.
==1415==  The main thread stack size used in this run was 8388608.
==1415== 
==1415== HEAP SUMMARY:
==1415==     in use at exit: 2,728 bytes in 153 blocks
==1415==   total heap usage: 335 allocs, 182 frees, 24,712 bytes allocated
==1415== 
==1415== LEAK SUMMARY:
==1415==    definitely lost: 0 bytes in 0 blocks
==1415==    indirectly lost: 0 bytes in 0 blocks
==1415==      possibly lost: 0 bytes in 0 blocks
==1415==    still reachable: 2,728 bytes in 153 blocks
==1415==         suppressed: 0 bytes in 0 blocks
==1415== Rerun with --leak-check=full to see details of leaked memory
==1415== 
==1415== For counts of detected and suppressed errors, rerun with: -v
==1415== Use --track-origins=yes to see where uninitialised values come from
==1415== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
