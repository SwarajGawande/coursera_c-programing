Grading at Fri Jun 26 04:24:15 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1637== Memcheck, a memory error detector
==1637== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1637== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1637== Command: ./tester h.txt d.txt
==1637== Parent PID: 1636
==1637== 
==1637== Invalid read of size 8
==1637==    at 0x401190: print_hand (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x401E8E: main (test-input.c:84)
==1637==  Address 0x5205978 is 0 bytes after a block of size 56 alloc'd
==1637==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1637==    by 0x4014AD: add_empty_card (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x400BA2: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x400DA4: read_input (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x401D73: main (test-input.c:69)
==1637== 
==1637== Invalid read of size 8
==1637==    at 0x401193: print_hand (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x401E8E: main (test-input.c:84)
==1637==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1637== 
==1637== 
==1637== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1637==  Access not within mapped region at address 0x0
==1637==    at 0x401193: print_hand (in /graderhome/work/c4prj2_input/tester)
==1637==    by 0x401E8E: main (test-input.c:84)
==1637==  If you believe this happened as a result of a stack
==1637==  overflow in your program's main thread (unlikely but
==1637==  possible), you can try to increase the size of the
==1637==  main thread stack using the --main-stacksize= flag.
==1637==  The main thread stack size used in this run was 8388608.
==1637== 
==1637== HEAP SUMMARY:
==1637==     in use at exit: 992 bytes in 67 blocks
==1637==   total heap usage: 127 allocs, 60 frees, 16,384 bytes allocated
==1637== 
==1637== LEAK SUMMARY:
==1637==    definitely lost: 0 bytes in 0 blocks
==1637==    indirectly lost: 0 bytes in 0 blocks
==1637==      possibly lost: 0 bytes in 0 blocks
==1637==    still reachable: 992 bytes in 67 blocks
==1637==         suppressed: 0 bytes in 0 blocks
==1637== Rerun with --leak-check=full to see details of leaked memory
==1637== 
==1637== For counts of detected and suppressed errors, rerun with: -v
==1637== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1643== Memcheck, a memory error detector
==1643== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1643== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1643== Command: ./tester i1 i2
==1643== Parent PID: 1642
==1643== 
==1643== Use of uninitialised value of size 8
==1643==    at 0x401193: print_hand (in /graderhome/work/c4prj2_input/tester)
==1643==    by 0x401E8E: main (test-input.c:84)
==1643== 
==1643== Invalid read of size 8
==1643==    at 0x401193: print_hand (in /graderhome/work/c4prj2_input/tester)
==1643==    by 0x401E8E: main (test-input.c:84)
==1643==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1643== 
==1643== 
==1643== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1643==  Access not within mapped region at address 0x0
==1643==    at 0x401193: print_hand (in /graderhome/work/c4prj2_input/tester)
==1643==    by 0x401E8E: main (test-input.c:84)
==1643==  If you believe this happened as a result of a stack
==1643==  overflow in your program's main thread (unlikely but
==1643==  possible), you can try to increase the size of the
==1643==  main thread stack using the --main-stacksize= flag.
==1643==  The main thread stack size used in this run was 8388608.
==1643== 
==1643== HEAP SUMMARY:
==1643==     in use at exit: 2,728 bytes in 153 blocks
==1643==   total heap usage: 335 allocs, 182 frees, 24,712 bytes allocated
==1643== 
==1643== LEAK SUMMARY:
==1643==    definitely lost: 0 bytes in 0 blocks
==1643==    indirectly lost: 0 bytes in 0 blocks
==1643==      possibly lost: 0 bytes in 0 blocks
==1643==    still reachable: 2,728 bytes in 153 blocks
==1643==         suppressed: 0 bytes in 0 blocks
==1643== Rerun with --leak-check=full to see details of leaked memory
==1643== 
==1643== For counts of detected and suppressed errors, rerun with: -v
==1643== Use --track-origins=yes to see where uninitialised values come from
==1643== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
